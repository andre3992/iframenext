{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const getData = (campaignData, setCampaignData, params, setFetching) => {\n  if (params[\"\"]) {\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        params,\n        secret: process.env.NEXT_PUBLIC_API_SECRET\n      })\n    };\n    fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/campaign/${campaignData.campaign}`, options).then(result => result.json()).then(final => {\n      let campaignDataCopy = _objectSpread({}, campaignData);\n\n      campaignDataCopy.defaultCampaignData = final;\n      setCampaignData(campaignDataCopy);\n      setFetching(false);\n      return;\n    }).catch(err => {\n      //console.log(\"erro\", err);\n      setFetching(false);\n      return;\n    });\n  } else {\n    params.secret = process.env.NEXT_PUBLIC_API_SECRET;\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(params)\n    };\n    fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/campaign/${campaignData.campaign}`, options).then(result => result.json()).then(final => {\n      let campaignDataCopy = _objectSpread({}, campaignData);\n\n      campaignDataCopy.defaultCampaignData = final;\n      setCampaignData(campaignDataCopy);\n      setFetching(false);\n      return;\n    }).catch(err => {\n      //console.log(\"erro\", err);\n      setFetching(false);\n      return;\n    });\n  }\n};\nexport const getSearchParams = (params, setParams) => {\n  const querySearchParams = window.location.search.substring(1).split(\"&\");\n  const searchParams = {};\n  querySearchParams.map(param => {\n    param = param.split(\"=\");\n    searchParams[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\n  }); //can return correct searchParams with utm_source, adgroup etc,\n  //or it may return and empty object with a property that has undefined value {\"\": \"undefined\"}\n\n  setParams(searchParams);\n  return searchParams;\n};","map":{"version":3,"sources":["C:/Users/BO0004/Desktop/repositorios/iframe-endesapt/controllers/fetchData.js"],"names":["getData","campaignData","setCampaignData","params","setFetching","options","method","headers","body","JSON","stringify","secret","process","env","NEXT_PUBLIC_API_SECRET","fetch","NEXT_PUBLIC_API_URL","campaign","then","result","json","final","campaignDataCopy","defaultCampaignData","catch","err","getSearchParams","setParams","querySearchParams","window","location","search","substring","split","searchParams","map","param","decodeURIComponent"],"mappings":";;;;;;AAAA,OAAO,MAAMA,OAAO,GAAG,CAACC,YAAD,EAAeC,eAAf,EAAgCC,MAAhC,EAAwCC,WAAxC,KAAwD;AAC7E,MAAID,MAAM,CAAC,EAAD,CAAV,EAAgB;AACd,QAAIE,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFG;AAKZC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,QAAAA,MADmB;AAEnBQ,QAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFD,OAAf;AALM,KAAd;AAUAC,IAAAA,KAAK,CACF,GAAEH,OAAO,CAACC,GAAR,CAAYG,mBAAoB,iBAAgBf,YAAY,CAACgB,QAAS,EADtE,EAEHZ,OAFG,CAAL,CAIGa,IAJH,CAISC,MAAD,IAAYA,MAAM,CAACC,IAAP,EAJpB,EAKGF,IALH,CAKSG,KAAD,IAAW;AACf,UAAIC,gBAAgB,qBAAQrB,YAAR,CAApB;;AACAqB,MAAAA,gBAAgB,CAACC,mBAAjB,GAAuCF,KAAvC;AAEAnB,MAAAA,eAAe,CAACoB,gBAAD,CAAf;AACAlB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD,KAZH,EAaGoB,KAbH,CAaUC,GAAD,IAAS;AACd;AACArB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD,KAjBH;AAkBD,GA7BD,MA6BO;AACLD,IAAAA,MAAM,CAACQ,MAAP,GAAgBC,OAAO,CAACC,GAAR,CAAYC,sBAA5B;AAEA,QAAIT,OAAO,GAAG;AACZC,MAAAA,MAAM,EAAE,MADI;AAEZC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFG;AAKZC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,MAAf;AALM,KAAd;AAOAY,IAAAA,KAAK,CACF,GAAEH,OAAO,CAACC,GAAR,CAAYG,mBAAoB,iBAAgBf,YAAY,CAACgB,QAAS,EADtE,EAEHZ,OAFG,CAAL,CAIGa,IAJH,CAISC,MAAD,IAAYA,MAAM,CAACC,IAAP,EAJpB,EAKGF,IALH,CAKSG,KAAD,IAAW;AACf,UAAIC,gBAAgB,qBAAQrB,YAAR,CAApB;;AACAqB,MAAAA,gBAAgB,CAACC,mBAAjB,GAAuCF,KAAvC;AACAnB,MAAAA,eAAe,CAACoB,gBAAD,CAAf;AACAlB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD,KAXH,EAYGoB,KAZH,CAYUC,GAAD,IAAS;AACd;AACArB,MAAAA,WAAW,CAAC,KAAD,CAAX;AACA;AACD,KAhBH;AAiBD;AACF,CA1DM;AA4DP,OAAO,MAAMsB,eAAe,GAAG,CAACvB,MAAD,EAASwB,SAAT,KAAuB;AACpD,QAAMC,iBAAiB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiC,CAAjC,EAAoCC,KAApC,CAA0C,GAA1C,CAA1B;AAEA,QAAMC,YAAY,GAAG,EAArB;AAEAN,EAAAA,iBAAiB,CAACO,GAAlB,CAAuBC,KAAD,IAAW;AAC/BA,IAAAA,KAAK,GAAGA,KAAK,CAACH,KAAN,CAAY,GAAZ,CAAR;AAEAC,IAAAA,YAAY,CAACG,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAAnB,CAAZ,GAA6CC,kBAAkB,CAACD,KAAK,CAAC,CAAD,CAAN,CAA/D;AACD,GAJD,EALoD,CAWpD;AACA;;AAEAT,EAAAA,SAAS,CAACO,YAAD,CAAT;AACA,SAAOA,YAAP;AACD,CAhBM","sourcesContent":["export const getData = (campaignData, setCampaignData, params, setFetching) => {\r\n  if (params[\"\"]) {\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        params,\r\n        secret: process.env.NEXT_PUBLIC_API_SECRET,\r\n      }),\r\n    };\r\n    fetch(\r\n      `${process.env.NEXT_PUBLIC_API_URL}/api/campaign/${campaignData.campaign}`,\r\n      options\r\n    )\r\n      .then((result) => result.json())\r\n      .then((final) => {\r\n        let campaignDataCopy = { ...campaignData };\r\n        campaignDataCopy.defaultCampaignData = final;\r\n\r\n        setCampaignData(campaignDataCopy);\r\n        setFetching(false);\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        //console.log(\"erro\", err);\r\n        setFetching(false);\r\n        return;\r\n      });\r\n  } else {\r\n    params.secret = process.env.NEXT_PUBLIC_API_SECRET;\r\n\r\n    let options = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(params),\r\n    };\r\n    fetch(\r\n      `${process.env.NEXT_PUBLIC_API_URL}/api/campaign/${campaignData.campaign}`,\r\n      options\r\n    )\r\n      .then((result) => result.json())\r\n      .then((final) => {\r\n        let campaignDataCopy = { ...campaignData };\r\n        campaignDataCopy.defaultCampaignData = final;\r\n        setCampaignData(campaignDataCopy);\r\n        setFetching(false);\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        //console.log(\"erro\", err);\r\n        setFetching(false);\r\n        return;\r\n      });\r\n  }\r\n};\r\n\r\nexport const getSearchParams = (params, setParams) => {\r\n  const querySearchParams = window.location.search.substring(1).split(\"&\");\r\n\r\n  const searchParams = {};\r\n\r\n  querySearchParams.map((param) => {\r\n    param = param.split(\"=\");\r\n\r\n    searchParams[decodeURIComponent(param[0])] = decodeURIComponent(param[1]);\r\n  });\r\n\r\n  //can return correct searchParams with utm_source, adgroup etc,\r\n  //or it may return and empty object with a property that has undefined value {\"\": \"undefined\"}\r\n\r\n  setParams(searchParams);\r\n  return searchParams;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}